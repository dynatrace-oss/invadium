name: build-invadium

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - v*

env:
  BACKEND_IMAGE: ghcr.io/dynatrace-oss/invadium-backend
  FRONTEND_IMAGE: ghcr.io/dynatrace-oss/invadium-frontend

jobs:
  pre-commit-hooks:
    runs-on: ubuntu-latest
    container:
      image: nikolaik/python-nodejs:python3.10-nodejs18
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fix git permissions
        run: git config --global --add safe.directory $PWD

      - name: Fix cache directory permissions
        run: |
          mkdir -p ~/.npm
          mkdir -p ~/.cache/pip
          mkdir -p ~/.cache/pre-commit
          chown -R $USER:$USER ~/.npm
          chown -R $USER:$USER ~/.cache/pip
          chown -R $USER:$USER ~/.cache/pre-commit

      - name: Cache pip packages
        id: cache-pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache npm packages
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache pre-commit environments
        id: cache-pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('**/.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pre-commit-

      - name: Install pre-commit hooks
        run: python -m pip install --upgrade pre-commit

      - name: Install npm dependencies for frontend hooks
        working-directory: frontend
        run: npm install

      - name: Run pre-commit hooks
        run: pre-commit run -v --all-files --show-diff-on-failure

  build-backend:
    needs: pre-commit-hooks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.BACKEND_IMAGE }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN  }}

      - name: Build and push images
        uses: docker/build-push-action@v3
        with:
          context: backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.BACKEND_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.BACKEND_IMAGE }}:buildcache,mode=max

  build-frontend:
    needs: pre-commit-hooks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.FRONTEND_IMAGE }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GHCR
        uses: docker/login-action@v2
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN  }}

      - name: Build and push images
        uses: docker/build-push-action@v3
        with:
          context: frontend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.FRONTEND_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.FRONTEND_IMAGE }}:buildcache,mode=max
